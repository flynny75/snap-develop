
import tetris.snap.Agent;
import tetris.snap.AgentListener;
import tetris.snap.Container;
import tetris.snap.PanelListener;

import android.app.Activity;
import android.content.SharedPreferences;
import android.content.res.AssetManager;
import android.graphics.Typeface;
import android.os.Bundle;
import android.view.MotionEvent;
import android.view.View;
import android.widget.TextView;

class Game with AgentListener {

	static const ICICLE_TAG = "simple-tetris";
	static const PREFS_HIGH_LINES = "high_lines";
	static const PREFS_HIGH_SCORES = "high_scores";

	var tetrisView;
	var scoresView;
	var highScoresView;
	var scoresCounter;
	var model = new Model();
	var messageView;

	// TODO: use some object here (2013/07/16)
	var highLines = 0;
	var highScores = 0;

	var onTouchListener;
	var tetris;
	
	new(tetris){
	   this.onTouchListener = new GameController(this);
	   this.tetris = tetris;
	}

	override onCreate(savedInstanceState) {
		tetrisView = Container.getContainer().get(PanelListener.class);
		tetrisView.setModel(model);
		tetrisView.setGame(this);
		tetrisView.getPanel().setOnTouchListener(onTouchListener);

		scoresView = TextView.class.cast(tetris.findViewById(R.id.scores));
		scoresCounter = new ScoresCounter(scoresView,
		      tetris.getString(R.string.scores_format));
		model.setCounter(scoresCounter);
		highScoresView = TextView.class.cast(tetris.findViewById(R.id.high_scores));

		loadHighScoresAndLines();

		messageView = TextView.class.cast(tetris.findViewById(R.id.message));

		// Restore the state:
		if (null != savedInstanceState) {
			onRestoreInstanceState(savedInstanceState);
		} else {
			messageView.setText(tetris.getApplicationContext().getString(
					R.string.mode_ready));
		}
		
		// Assign font:
		var tf = Typeface.createFromAsset(tetris.getAssets(), "Callie-Mae.ttf");
		scoresView.setTypeface(tf);
		highScoresView.setTypeface(tf);
		messageView.setTypeface(tf);

	}
	
	getAssets(){
	   return tetris.getAssets();
	}
	
	getModel(){
	   return model;
	}

	getDirection(v, event) {
		// Normalize x,y between 0 and 1

		var x = event.getX() / v.getWidth();
		var y = event.getY() / v.getHeight();

		var direction;
		if (y > x) {
			direction = (x > 1 - y) ? 2 : 0;
		} else {
			direction = (x > 1 - y) ? 3 : 1;
		}
		return direction;
	}

	doMove(move) {
		if (model.isGameActive()) {
			tetrisView.setGameCommand(move);
			scoresView.invalidate();
		}
	}

	startNewGame() {
		if (!model.isGameActive()) {
			messageView.setVisibility(View.INVISIBLE);
			scoresCounter.reset();
			model.gameStart();
			tetrisView.setGameCommandWithDelay(Move.DOWN);
		}
	}

	endGame() {
		messageView.setVisibility(View.VISIBLE);
		storeHighScoresAndLines();
		messageView
				.setText(tetris.getApplicationContext().getText(R.string.mode_over));
	}

	pauseGame() {
		model.setGamePaused();
		messageView.setVisibility(View.VISIBLE);
		messageView.setText(tetris.getApplicationContext()
				.getText(R.string.mode_pause));
		storeHighScoresAndLines();
	}
	
	activateGame() {
		messageView.setVisibility(View.INVISIBLE);
		model.setGameActive();	
	}
	
	override onBackPressed() {
		if( model.isGameOver() || model.isGameBeforeStart() || model.isGamePaused() ) {
			tetris.finish();
			return;
		}
		if( model.isGameActive() ) {
			pauseGame();
			return;
		}
	}

	override onPause() {
		pauseGame();
	}

	override onSaveInstanceState(outState) {
		var bundle = new Bundle();
		model.storeTo(bundle);
		scoresCounter.storeTo(bundle);
		outState.putBundle(ICICLE_TAG, bundle);
	}

	override onRestoreInstanceState(inState) {
		var bundle = inState.getBundle(ICICLE_TAG);
		if (null != bundle) {
			model.restoreFrom(bundle);
			scoresCounter.restoreFrom(bundle);
		}
		pauseGame();

	}

	loadHighScoresAndLines() {
		var prefs = tetris.getPreferences(Activity.MODE_PRIVATE);
		highLines = prefs.getInt(PREFS_HIGH_LINES, 0);
		highScores = prefs.getInt(PREFS_HIGH_SCORES, 0);
		updateHighScoresView();
	}

	updateHighScoresView() {
		highScoresView.setText(String.format(
				tetris.getString(R.string.high_scores_format), highLines, highScores));
	}

	storeHighScoresAndLines() {
		if (highScores < scoresCounter.getScores()) {
			highScores = scoresCounter.getScores();
		}
		if (highLines < scoresCounter.getLines()) {
			highLines = scoresCounter.getLines();
		}

		var prefs = tetris.getPreferences(Activity.MODE_PRIVATE);
		var editor = prefs.edit();
		editor.putInt(PREFS_HIGH_LINES, highLines);
		editor.putInt(PREFS_HIGH_SCORES, highScores);

		editor.commit();
		updateHighScoresView();
	}

}